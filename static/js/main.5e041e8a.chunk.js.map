{"version":3,"sources":["Components/Home.js","Components/AboutMe.js","Components/CV.js","Components/Projects.js","Components/main.js","App.js","serviceWorker.js","index.js","img/face.png"],"names":["Home","style","width","margin","className","col","src","face","alt","href","class","aria-hidden","Component","AboutMe","CV","Projects","props","state","activeTab","this","shadow","color","height","background","border","colored","name","onChange","tabId","setState","ripple","toggleCategories","Main","exact","path","component","App","basename","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5e041e8a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Grid, Cell } from 'react-mdl'\r\nimport face from '../img/face.png'\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Grid className='Homepage'>\r\n                    <Cell col={12}>\r\n                        <img\r\n                          src={face}\r\n                          alt=\"avatar\"\r\n                          className='face'\r\n                        />\r\n                        <div className='banner'>\r\n                            <h1>Yiwen Tang</h1>\r\n                            <hr></hr>\r\n                            <p>Master of Science in Data Science at University of Pennsylvania</p>\r\n                            <p>Python | Java | Javascript | HTML/CSS | React | Node.js | MySQL | MongoDB</p>\r\n                            <div className='social'>\r\n                                {/*LinkedIn*/}\r\n                                <a href=\"https://www.linkedin.com/in/yiwen-tang-nb\">\r\n                                    <i class=\"fa fa-linkedin-square\" aria-hidden=\"true\"></i>\r\n                                </a>\r\n                                {/*Github*/}                           \r\n                                <a href=\"https://github.com/tonytang731\">\r\n                                    <i class=\"fa fa-github-square\" aria-hidden=\"true\"></i>\r\n                                </a>\r\n                                {/*Kaggle*/}                           \r\n                                <a href=\"https://www.kaggle.com/tonytang731\">\r\n                                    <i class=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n                                </a>\r\n                                {/*Soundcloud*/}                            \r\n                                <a href=\"https://soundcloud.com/yiwen-tang-514137556\">\r\n                                    <i class=\"fa fa-soundcloud\" aria-hidden=\"true\"></i>\r\n                                </a>\r\n                            </div> \r\n                        </div>\r\n                    </Cell>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react'\r\n\r\nclass AboutMe extends Component {\r\n    render() {\r\n        return (\r\n            <div><h1>AboutMe Page</h1></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AboutMe;","import React, { Component } from 'react'\r\n\r\nclass CV extends Component {\r\n    render() {\r\n        return (\r\n            <div><h1>CV Page</h1></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CV;","\r\nimport React, { Component } from 'react';\r\nimport { Tabs, Tab, Grid, Cell, Card, CardTitle, CardText, CardActions, Button, CardMenu, IconButton } from 'react-mdl';\r\n\r\n\r\nclass Projects extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { activeTab: 0 };\r\n  }\r\n\r\n  toggleCategories() {\r\n\r\n    if(this.state.activeTab === 0){\r\n      return(\r\n        <div className=\"projects-grid\">\r\n          {/* Project 1 */}\r\n          <Card className=\"project-cards\" shadow={5}>\r\n            <CardTitle style={{color: '#fff', height: '176px', background: 'url(https://xtnotes-1255646395.coshk.myqcloud.com/images/react-1.svg) center / cover'}} >Photogram</CardTitle>\r\n            <CardText>\r\n                •\tReproduced Instagram’s main functionalities and UI with React and UIkit <br></br>\r\n                •\tCreated branching strategies for project management and tracked issues/user story with Github <br></br>\r\n                •\tConducted unit testing using Jest, functional testing using Selenium and Continuous Integration with Travis CI\r\n            </CardText>\r\n            <CardActions border>\r\n                <a href=\"https://github.com/tonytang731/Photogram\"><Button colored>GitHub</Button></a>\r\n            </CardActions>\r\n            <CardMenu style={{color: '#fff'}}>\r\n              <IconButton name=\"share\" />\r\n            </CardMenu>\r\n          </Card>\r\n\r\n          {/* Project 2 */}\r\n          <Card className=\"project-cards\" shadow={5}>\r\n            <CardTitle style={{color: '#fff', height: '176px', background: 'url(https://xtnotes-1255646395.coshk.myqcloud.com/images/react-1.svg) center / cover'}} >foodieCat</CardTitle>\r\n            <CardText>\r\n                •\tProvided multiple services that connect the users to great food in the United States, including restaurant recommendations, trip planning, and friend suggestions. <br></br>\r\n                •\tOffered guidance for the users to select restaurants of their interest based on their current physical location. <br></br>\r\n                •\tLearned the quality of a certain restaurant by viewing its most useful comments and reviews. Besides the functionality contained in most of the crowdsourced review apps <br></br>\r\n                •\tIntroduced the idea of social media by connecting the users and recommending restaurants based on their mutual preferences and locations <br></br>\r\n            </CardText>\r\n            <CardActions border>\r\n              <a href=\"https://github.com/Yi-Nung/CIS550_project\"><Button colored>GitHub</Button></a>\r\n            </CardActions>\r\n            <CardMenu style={{color: '#fff'}}>\r\n              <IconButton name=\"share\" />\r\n            </CardMenu>\r\n          </Card>\r\n\r\n          {/* Project 3 */}\r\n          <Card className=\"project-cards\" shadow={5}>\r\n            <CardTitle style={{color: '#fff', height: '176px', background: 'url(https://xtnotes-1255646395.coshk.myqcloud.com/images/react-1.svg) center / cover'}} >Yiwen's HomePage</CardTitle>\r\n            <CardText>\r\n                •\tDesigned interfaces with React MDL<br></br>\r\n                •\tDeployed at Github Pages<br></br>\r\n            </CardText>\r\n            <CardActions border>\r\n                <a href=\"https://github.com/tonytang731/github-pages-react-app\"><Button colored>GitHub</Button></a>\r\n            </CardActions>\r\n            <CardMenu style={{color: '#fff'}}>\r\n              <IconButton name=\"share\" />\r\n            </CardMenu>\r\n          </Card>\r\n        </div>\r\n      )\r\n    } else if(this.state.activeTab === 1) {\r\n      return (\r\n        <div><h1>This is Python</h1></div>\r\n      )\r\n    } else if(this.state.activeTab === 2) {\r\n      return (\r\n        <div><h1>This is R</h1></div>\r\n      )\r\n    } else if(this.state.activeTab === 3) {\r\n      return (\r\n        <div><h1>This is MongoDB</h1></div>\r\n      )\r\n    } else if(this.state.activeTab === 4) {\r\n        return (\r\n          <div><h1>This is MySQL</h1></div>\r\n      )\r\n    } else if(this.state.activeTab === 5) {\r\n        return (\r\n          <div><h1>This is NLP Annotation Service</h1></div>\r\n    )\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Tabs activeTab={this.state.activeTab} onChange={(tabId) => this.setState({ activeTab: tabId })} ripple>\r\n          <Tab>React</Tab>\r\n          <Tab>Python</Tab>\r\n          <Tab>R</Tab>\r\n          <Tab>MongoDB</Tab>\r\n          <Tab>MySQL</Tab>\r\n          <Tab>NLP Annotation Service</Tab>\r\n        </Tabs>\r\n\r\n\r\n        <Grid>\r\n            <Cell col={12}>\r\n            <div className=\"content\">{this.toggleCategories()}</div>\r\n            </Cell>\r\n        </Grid>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './Home.js';\r\nimport AboutMe from './AboutMe.js';\r\nimport CV from './CV.js';\r\nimport Projects from \"./Projects.js\";\r\n\r\nconst Main = () => (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/cv\" component={CV} />\r\n            <Route path=\"/aboutme\" component={AboutMe} />\r\n            <Route path=\"/projects\" component={Projects} />\r\n        </Switch>\r\n)\r\n\r\nexport default Main;","import React, {Component} from 'react';\r\nimport './App.css';\r\n//import Components from React MDL\r\nimport { Layout, Header, Drawer, Navigation, Content } from 'react-mdl';\r\nimport Main from './Components/main.js';\r\nimport { Link, HashRouter } from 'react-router-dom';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename=\"/\">\r\n        <div className=\"demo-big-content\">\r\n          <Layout>\r\n              <Header className='header_color' title=\"Title\" scroll>\r\n                  <Navigation>\r\n                      <Link to=\"/cv\">Curriculum Vitae</Link>\r\n                      <Link to=\"/aboutme\">About Me</Link>\r\n                      <Link to=\"/projects\">Projects</Link>\r\n                  </Navigation>\r\n              </Header>\r\n              <Drawer title=\"Title\">\r\n                  <Navigation>\r\n                      <Link to=\"/cv\">Curriculum Vitae</Link>\r\n                      <Link to=\"/aboutme\">About Me</Link>\r\n                      <Link to=\"/projects\">Projects</Link>\r\n                  </Navigation>\r\n              </Drawer>\r\n              <Content>\r\n                  <div className=\"page-content\" />\r\n                  <Main/>\r\n              </Content>\r\n          </Layout>\r\n      </div>\r\n    </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import \r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-mdl/extra/material.css';\r\nimport 'react-mdl/extra/material.js';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/face.33e98c73.png\";"],"sourceRoot":""}